#pragma kernel MarchingCube

#include "Constant.compute"
#include "Struct.compute"

float threshold;
int3 chunkSize;

StructuredBuffer<BuffPoint> bufferPoints;
AppendStructuredBuffer<BuffTriangle> bufferTriangles;

int to1D(float3 p)
{
    return p.x + p.y * chunkSize.x + p.z * chunkSize.x * chunkSize.y;
}

void GetGridPoints(float3 p, out BuffPoint points[8])
{

    points[0] = bufferPoints[to1D(p                  )];
    points[1] = bufferPoints[to1D(p + float3(0, 1, 0))];
    points[2] = bufferPoints[to1D(p + float3(1, 1, 0))];
    points[3] = bufferPoints[to1D(p + float3(1, 0, 0))];

    points[4] = bufferPoints[to1D(p + float3(0, 0, 1))];
    points[5] = bufferPoints[to1D(p + float3(0, 1, 1))];
    points[6] = bufferPoints[to1D(p + float3(1, 1, 1))];
    points[7] = bufferPoints[to1D(p + float3(1, 0, 1))];
}

float3 VertexInterp(float threshold, BuffPoint pointA, BuffPoint pointB)
{
    if (abs(threshold - pointA.val) < 0.00001)
        return pointA.pos;
    if (abs(threshold - pointB.val) < 0.00001)
        return pointB.pos;
    if (abs(pointA.val - pointB.val) < 0.00001)
        return pointA.pos;

    float mu = (threshold - pointA.val) / (pointB.val - pointA.val);

    return pointA.pos + mu * (pointB.pos - pointA.pos);
}

void Execute(uint3 id)
{
    if (id.x >= chunkSize.x - 1 || id.y >= chunkSize.y - 1 || id.z >= chunkSize.z - 1)
        return;

    BuffPoint gridPoints[8];

    GetGridPoints(float3(id.xyz), gridPoints);

    int cubeIndex = 0;

    for (int i = 0, j = 1; i < 8; i++, j += j)
    {
        if (gridPoints[i].val > threshold)
            cubeIndex |= j;
    }

    if (edgeTable[cubeIndex] == 0)
        return;

    float3 vertList[12];

    if (edgeTable[cubeIndex] & 1)
        vertList[0] = VertexInterp(threshold, gridPoints[0], gridPoints[1]);
    if (edgeTable[cubeIndex] & 2)
        vertList[1] = VertexInterp(threshold, gridPoints[1], gridPoints[2]);
    if (edgeTable[cubeIndex] & 4)
        vertList[2] = VertexInterp(threshold, gridPoints[2], gridPoints[3]);
    if (edgeTable[cubeIndex] & 8)
        vertList[3] = VertexInterp(threshold, gridPoints[3], gridPoints[0]);
    if (edgeTable[cubeIndex] & 16)
        vertList[4] = VertexInterp(threshold, gridPoints[4], gridPoints[5]);
    if (edgeTable[cubeIndex] & 32)
        vertList[5] = VertexInterp(threshold, gridPoints[5], gridPoints[6]);
    if (edgeTable[cubeIndex] & 64)
        vertList[6] = VertexInterp(threshold, gridPoints[6], gridPoints[7]);
    if (edgeTable[cubeIndex] & 128)
        vertList[7] = VertexInterp(threshold, gridPoints[7], gridPoints[4]);
    if (edgeTable[cubeIndex] & 256)
        vertList[8] = VertexInterp(threshold, gridPoints[0], gridPoints[4]);
    if (edgeTable[cubeIndex] & 512)
        vertList[9] = VertexInterp(threshold, gridPoints[1], gridPoints[5]);
    if (edgeTable[cubeIndex] & 1024)
        vertList[10] = VertexInterp(threshold, gridPoints[2], gridPoints[6]);
    if (edgeTable[cubeIndex] & 2048)
        vertList[11] = VertexInterp(threshold, gridPoints[3], gridPoints[7]);

    for (i = 0; triTable[cubeIndex][i] != -1; i += 3)
    {
        BuffTriangle t;
        t.a = vertList[triTable[cubeIndex][i    ]];
        t.b = vertList[triTable[cubeIndex][i + 1]];
        t.c = vertList[triTable[cubeIndex][i + 2]];

        bufferTriangles.Append(t);
    }
}

[numthreads(8, 8, 8)]
void MarchingCube(uint3 id : SV_DispatchThreadID)
{
    Execute(id);
}